#!/usr/bin/env python

import gevent.monkey

gevent.monkey.patch_all()

import bottle
import sys
import multiprocessing
import os
from bottle import template, tob, ERROR_PAGE_TEMPLATE


def get_db_clients(dsns):
    return dsns


def get_server_opts(override):
    worker_class = 'geventwebsocket.gunicorn.workers.GeventWebSocketWorker'
    default = bottle.ConfigDict()
    default.update({
        'server': 'gunicorn',
        'workers': multiprocessing.cpu_count() * 2 + 1,
        'worker_class': worker_class,
        'preload_app': True,
        'debug': False,
        'pythonpath': os.getcwd(),
        'host': '0.0.0.0',
        'port': os.environ.get('PORT', 8000),
        'prefix': ''
    })
    default.update(override)
    return default


def create_app(prefix, routes):
    root = bottle.Bottle()
    app = bottle.Bottle()

    root_prefix = ('', None, '/')

    for key in routes:
        app.mount('/' + key, bottle.load(key).app)

    if prefix in root_prefix:
        root.merge(app.routes)
    else:
        root.mount(prefix, app)

    return root


sys.path.insert(0, os.getcwd())


try:
    import config
    bottle.db = get_db_clients(getattr(config, 'DATABASES', {}))
    SERVER_OPTS = get_server_opts(getattr(config, 'SERVER', {}))
    ROUTES = getattr(config, 'ROUTES', {})
except ImportError:
    bottle.db = get_db_clients({})
    SERVER_OPTS = get_server_opts({})
    ROUTES = {}


def stream_file(name, content):
    content_type = 'application/octet-stream'
    content_disposition = 'attachment; filename=%s;' % name
    bottle.response.add_header('Content-Type', content_type)
    bottle.response.add_header('Content-Disposition', content_disposition)
    bottle.response.add_header('Content-Size', content.length)
    return content


bottle.stream_file = stream_file


def websocket(callback):
    def wrapper(*args, **kwargs):
        callback(bottle.request.environ.get('wsgi.websocket'), *args, **kwargs)

    return wrapper


bottle.ext.websocket = websocket


class JSONPlugin(object):
    ''' Bottle plugin which encapsulates results and error in a json object.
    Intended for instances where you want to use Bottle as an api server. '''

    name = 'json'
    api = 2

    statuses = {
        0: 'success',
        1: 'error',
        2: 'internal failure',
    }

    def __init__(self, ensure_ascii=False, **kwargs):

        try:
            from bson.json_util import dumps
        except ImportError:
            from simplejson import dumps
        except ImportError:
            from json import dumps

        self.dumps = lambda obj: dumps(obj, ensure_ascii, **kwargs)

    def accept(self, content_type):
        header_accept = bottle.request.headers.get('Accept', '')
        if content_type in header_accept:
            return True
        elif '*/*' in header_accept:
            return True
        return False

    def setup(self, app):
        self.app = app
        ''' Handle plugin install '''
        setattr(self.app, 'default_error_handler', self.custom_error_handler)

    def apply(self, callback, route):
        ''' Handle route callbacks '''
        if not self.dumps:
            return callback

        def wrapper(*a, **ka):
            ''' Monkey patch method accept in thread_local request '''
            setattr(bottle.request, 'accept', getattr(self, 'accept'))
            ''' Encapsulate the result in json '''
            output = callback(*a, **ka)
            if bottle.request.accept('json'):
                response_object = self.get_response_object(0)
                response_object['data'] = output
                bottle.response.content_type = 'application/json'
                return self.dumps(response_object)
            return output
        return wrapper

    def get_response_object(self, status):
        ''' Helper for building the json object '''
        if status in self.statuses:
            json_response = {
                'status': self.statuses.get(status),
                'status_code': status,
                'data': None,
                'error': None
            }
            return json_response
        else:
            self.get_response_object(2)

    def custom_error_handler(self, error):
        if self.accept('json'):
            ''' Monkey patch method for json formatting error responses '''
            response_object = self.get_response_object(1)
            response_object['error'] = {
                'status_code': error.status_code,
                'status': error.status_line,
                'message': error.body,
            }
            if bottle.DEBUG and error.traceback:
                response_object['error']['debug'] = {
                    'exception': repr(error.exception),
                    'traceback': repr(error.traceback),
                }
            bottle.response.content_type = 'application/json'
            return self.dumps(response_object)
        return tob(template(ERROR_PAGE_TEMPLATE, e=error))


bottle.JSONPlugin = JSONPlugin


class Bottle(bottle.Bottle):
    def ws(self, path, **options):
        if 'apply' not in options:
            options['apply'] = [bottle.ext.websocket]
        else:
            options['apply'].append(bottle.ext.websocket)
        return self.route(path, 'GET', **options)

    def public(self, prefix, root='./public', **options):
        if 'callback' not in options:
            callback = lambda path: bottle.static_file(path, root=root)
            options['callback'] = callback
        prefix = '' if prefix == '/' else prefix
        return self.route(prefix + '/<path:path>', 'GET', **options)


class Resource(object):

    def __init__(self, app, pk='[a-f0-9]+', **kwargs):

        app.get('/', callback=self.index)
        app.post('/', callback=self.create)
        app.get('/<pk:re:%s>' % pk, callback=self.read)
        app.put('/<pk:re:%s>' % pk, callback=self.update)
        app.delete('/<pk:re:%s>' % pk, callback=self.delete)

        for k, v in kwargs.iteritems():
            if k not in self.__dict__:
                setattr(self, k, v)

    def index(self):
        return bottle.HTTPError(404)

    def create(self):
        return bottle.HTTPError(404)

    def read(self, pk):
        return bottle.HTTPError(404)

    def update(self, pk):
        return bottle.HTTPError(404)

    def delete(self, pk):
        return bottle.HTTPError(404)


bottle.Resource = Resource
bottle.Bottle = Bottle
bottle.ws = bottle.make_default_app_wrapper('ws')
bottle.public = bottle.make_default_app_wrapper('public')


if __name__ == '__main__':
    app = create_app(SERVER_OPTS.pop('prefix'), ROUTES)
    bottle.run(app=app, **SERVER_OPTS)
