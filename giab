#!/usr/bin/env python

import gevent.monkey

gevent.monkey.patch_all()

import bottle
import sys
import os
import logging
import multiprocessing


sys.path.insert(0, os.getcwd())


def get_server_opts(override):
    worker_class = 'geventwebsocket.gunicorn.workers.GeventWebSocketWorker'
    default = bottle.ConfigDict()
    default.update({
        'server': 'gunicorn',
        'workers': multiprocessing.cpu_count() * 2 + 1,
        'worker_class': worker_class,
        'preload_app': True,
        'debug': False,
        'pythonpath': os.getcwd(),
        'host': '0.0.0.0',
        'port': os.environ.get('PORT', 8000),
        'prefix': ''
    })
    default.update(override)
    return default


def create_app(prefix, routes):
    root = bottle.Bottle()
    app = bottle.Bottle()

    root_prefix = ('', None, '/')

    for key, value in routes.iteritems():
        aux = bottle.load(value).app
        if key in root_prefix:
            app.merge(aux.routes)
        else:
            app.mount(key, aux)

    if prefix in root_prefix:
        root.merge(app.routes)
    else:
        root.mount(prefix, app)

    return root


try:
    import config
    SERVER_CONFIG = get_server_opts(getattr(config, 'SERVER', {}))
    if not isinstance(SERVER_CONFIG, dict) or len(SERVER_CONFIG) == 0:
        logging.info('Genie server start with default parameters')

    ROUTES_CONFIG = getattr(config, 'ROUTES', {})
    if not isinstance(ROUTES_CONFIG, dict) or len(ROUTES_CONFIG) == 0:
        logging.warning('Genie config ROUTES is empty', extra={'stack': True})
except ImportError:
    logging.error('Doesn\'t exist Genie config file', exc_info=True)
    raise ImportError


if __name__ == '__main__':
    app = create_app(SERVER_CONFIG.pop('prefix'), ROUTES_CONFIG)
    bottle.run(app=app, **SERVER_CONFIG)
