#!/usr/bin/env python

import gevent.monkey

gevent.monkey.patch_all()

import bottle
import sys
import multiprocessing
import os
from bottle import template, tob, ERROR_PAGE_TEMPLATE


def get_db_clients(dsns):
    return dsns


def get_server_opts(override):
    worker_class = 'geventwebsocket.gunicorn.workers.GeventWebSocketWorker'
    default = bottle.ConfigDict()
    default.update({
        'server': 'gunicorn',
        'workers': multiprocessing.cpu_count() * 2 + 1,
        'worker_class': worker_class,
        'preload_app': True,
        'debug': False,
        'pythonpath': os.getcwd(),
        'host': '0.0.0.0',
        'port': os.environ.get('PORT', 8000),
        'prefix': ''
    })
    default.update(override)
    return default


def create_app(prefix, routes):
    root = bottle.Bottle()
    app = bottle.Bottle()

    root_prefix = ('', None, '/')

    for key, value in routes.iteritems():
        aux = bottle.load(value).app
        if key in root_prefix:
            app.merge(aux.routes)
        else:
            app.mount(key, aux)

    if prefix in root_prefix:
        root.merge(app.routes)
    else:
        root.mount(prefix, app)

    return root


sys.path.insert(0, os.getcwd())


try:
    import config
    bottle.db = get_db_clients(getattr(config, 'DATABASES', {}))
    SERVER_OPTS = get_server_opts(getattr(config, 'SERVER', {}))
    ROUTES = getattr(config, 'ROUTES', {})
except ImportError:
    bottle.db = get_db_clients({})
    SERVER_OPTS = get_server_opts({})
    ROUTES = {}


def stream_file(name, content):
    content_type = 'application/octet-stream'
    content_disposition = 'attachment; filename=%s;' % name
    bottle.response.add_header('Content-Type', content_type)
    bottle.response.add_header('Content-Disposition', content_disposition)
    bottle.response.add_header('Content-Size', content.length)
    return content


bottle.stream_file = stream_file


def websocket(callback):
    def wrapper(*args, **kwargs):
        callback(bottle.request.environ.get('wsgi.websocket'), *args, **kwargs)

    return wrapper


bottle.ext.websocket = websocket


        else:




if __name__ == '__main__':
    app = create_app(SERVER_OPTS.pop('prefix'), ROUTES)
    bottle.run(app=app, **SERVER_OPTS)
